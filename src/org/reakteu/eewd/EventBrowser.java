/*
 * Copyright (C) 2014-2015 by gempa GmbH - http://gempa.de
 * License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher
 */
package org.reakteu.eewd;

import org.reakteu.eewd.data.EventArchive;
import org.reakteu.eewd.data.EventData;
import org.reakteu.eewd.data.EventFile;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.JDialog;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeExpansionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.xmlbeans.XmlCursor;

/**
 *
 * @author Stephan Herrnkind <herrnkind@gempa.de>
 */
public class EventBrowser extends javax.swing.JDialog
        implements ActionListener, TreeSelectionListener, TreeExpansionListener {

    public class NodeObject {

        public final File dir;

        public NodeObject(File dir) {
            this.dir = dir;
        }

        @Override
        public String toString() {
            return dir.getName();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        eventScrollPane = new javax.swing.JScrollPane();
        eventTree = new javax.swing.JTree();
        mainPanel = new javax.swing.JPanel();
        sequenceScrollPane = new javax.swing.JScrollPane();
        sequenceTable = new javax.swing.JTable();
        buttonPanel = new javax.swing.JPanel();
        deleteScenarioButton = new javax.swing.JButton();
        createScenarioButton = new javax.swing.JButton();
        replayButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        eventTree.setModel(initEventTreeModel());
        eventTree.setPreferredSize(new java.awt.Dimension(140, 80));
        eventTree.setShowsRootHandles(false);
        eventScrollPane.setViewportView(eventTree);

        splitPane.setLeftComponent(eventScrollPane);

        mainPanel.setPreferredSize(new java.awt.Dimension(600, 442));
        mainPanel.setLayout(new java.awt.BorderLayout());

        sequenceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Received", "Time", "Mag", "Lat", "Lon", "Depth"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sequenceTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        sequenceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClicked(evt);
            }
        });
        sequenceScrollPane.setViewportView(sequenceTable);

        mainPanel.add(sequenceScrollPane, java.awt.BorderLayout.CENTER);

        deleteScenarioButton.setText("Delete");
        deleteScenarioButton.setToolTipText("");
        deleteScenarioButton.setEnabled(false);
        buttonPanel.add(deleteScenarioButton);

        createScenarioButton.setText("Create Scenario");
        createScenarioButton.setToolTipText("");
        createScenarioButton.setEnabled(false);
        buttonPanel.add(createScenarioButton);

        replayButton.setText("Start Replay");
        replayButton.setEnabled(false);
        buttonPanel.add(replayButton);

        mainPanel.add(buttonPanel, java.awt.BorderLayout.PAGE_END);

        splitPane.setRightComponent(mainPanel);

        getContentPane().add(splitPane);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableClicked
        if (evt.getClickCount() > 1 && selectedSequence != null
            && sequenceTable.getRowCount() > 0) {
            int row = sequenceTable.rowAtPoint(evt.getPoint());
            if (row >= 0 && row < selectedSequence.size()) {
                EventFile up = selectedSequence.get(row);
                if (up.getEventParameters() != null) {
                    JDialog dialog = new JDialog(this, true);
                    //dialog.setLocationByPlatform(true);
                    JTextArea textArea = new JTextArea(100, 100);
                    textArea.setEditable(false);
                    textArea.setAutoscrolls(true);
                    //textArea.setPreferredSize(new Dimension(900, 500));
                    //textArea.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                    //textArea.setFont(new Font("courier new", Font.PLAIN, 12));
                    textArea.setLineWrap(true);
                    JScrollPane scroll = new JScrollPane();
                    scroll.setViewportView(textArea);
                    scroll.setAutoscrolls(true);

                    XmlCursor cursor = up.getEventParameters().newCursor();
                    cursor.toStartDoc();
                    textArea.setText(cursor.getObject().xmlText());
                    cursor.dispose();

                    dialog.add(scroll);
                    dialog.pack();
                    dialog.setVisible(true);
                }
                evt.consume();
            }
        }
    }//GEN-LAST:event_tableClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton createScenarioButton;
    private javax.swing.JButton deleteScenarioButton;
    private javax.swing.JScrollPane eventScrollPane;
    private javax.swing.JTree eventTree;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton replayButton;
    private javax.swing.JScrollPane sequenceScrollPane;
    private javax.swing.JTable sequenceTable;
    private javax.swing.JSplitPane splitPane;
    // End of variables declaration//GEN-END:variables

    private static final Logger LOG = LogManager.getLogger(EventBrowser.class);

    private final DateFormat df;
    private List<EventFile> selectedSequence;

    private javax.swing.tree.DefaultTreeModel treeModel;
    private javax.swing.tree.DefaultMutableTreeNode rootNode;
    private javax.swing.tree.DefaultMutableTreeNode loggedNode;
    private javax.swing.tree.DefaultMutableTreeNode scenarioNode;

    public EventBrowser(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        df.setTimeZone(TimeZone.getTimeZone("GMT"));

        selectedSequence = null;

        initComponents();
        initCustomComponents();
    }

    private void initCustomComponents() {
        eventTree.addTreeSelectionListener(this);
        eventTree.addTreeExpansionListener(this);
        deleteScenarioButton.addActionListener(this);
        createScenarioButton.addActionListener(this);
        replayButton.addActionListener(this);
    }

    private EventArchive getEventArchive() {
        Application app = Application.getInstance();
        if (app != null) {
            return app.getEventArchive();
        }
        return null;
    }

    private DefaultMutableTreeNode createNode(File dir) {
        return new DefaultMutableTreeNode(new NodeObject(dir));
    }

    private File getFile(DefaultMutableTreeNode node) {
        if (node != null && NodeObject.class.isInstance(node.getUserObject())) {
            return ((NodeObject) node.getUserObject()).dir;
        }
        return null;
    }

    private javax.swing.tree.TreeModel initEventTreeModel() {
        rootNode = new DefaultMutableTreeNode("Events");
        EventArchive archive = getEventArchive();
        if (archive != null) {
            loggedNode = createNode(archive.getLogDir());
            scenarioNode = createNode(archive.getScenarioDir());
            loadChildren(loggedNode);
            loadChildren(scenarioNode);
            rootNode.add(loggedNode);
            rootNode.add(scenarioNode);
        }

        treeModel = new javax.swing.tree.DefaultTreeModel(rootNode);
        return treeModel;
    }

    private boolean loadChildren(DefaultMutableTreeNode node) {
        if (node == null || !node.isLeaf()) {
            return false;
        }

        File dir = getFile(node);
        if (dir != null) {
            for (File f : dir.listFiles()) {
                if (f.isDirectory()) {
                    node.add(createNode(f));
                }
            }
        }
        return !node.isLeaf();
    }

    private boolean isLogNodeChild(DefaultMutableTreeNode node) {
        return node.getPath().length >= 2 && node.getPath()[1] == loggedNode;
    }

    private boolean isScenarioNodeChild(DefaultMutableTreeNode node) {
        return node.getPath().length >= 2 && node.getPath()[1] == scenarioNode;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Application app = Application.getInstance();
        if (app == null) {
            return;
        }

        if (e.getSource() == replayButton) {
            if (selectedSequence != null) {
                app.getEventFileScheduler().start(selectedSequence);
            }
            dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        } else {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) eventTree.getLastSelectedPathComponent();
            EventArchive archive = getEventArchive();
            if (node != null && archive != null) {
                File dir = getFile(node);
                if (dir != null) {
                    if (e.getSource() == createScenarioButton) {
                        archive.createScenario(dir);
                    } else if (e.getSource() == deleteScenarioButton) {
                        archive.deleteScenario(dir);
                    }
                    scenarioNode.removeAllChildren();
                    loadChildren(scenarioNode);
                    treeModel.nodeStructureChanged(scenarioNode);
                }
            }
        }
    }

    @Override
    public void valueChanged(TreeSelectionEvent e) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) eventTree
                .getLastSelectedPathComponent();

        DefaultTableModel model = (DefaultTableModel) sequenceTable.getModel();
        model.setRowCount(0);

        selectedSequence = null;
        deleteScenarioButton.setEnabled(false);
        createScenarioButton.setEnabled(false);
        replayButton.setEnabled(false);

        EventArchive archive = getEventArchive();
        if (archive != null && node != null && node.getPath().length > 2) {
            selectedSequence = archive.getEventSequence(getFile(node));
        }

        if (selectedSequence == null || selectedSequence.isEmpty()) {
            return;
        }

        boolean logMode = isLogNodeChild(node);

        deleteScenarioButton.setEnabled(!logMode);
        createScenarioButton.setEnabled(logMode);
        replayButton.setEnabled(true);

        sequenceTable.getTableHeader()
                .getColumnModel().getColumn(1)
                .setHeaderValue(logMode ? "Received" : "Delay (s)");
        sequenceTable.getTableHeader()
                .repaint();

        long offset = selectedSequence.get(0).getTime();
        for (EventFile up : selectedSequence) {
            EventData eventProps = null;
            try {
                eventProps = new EventData(up.getEventParameters(), 0, null);
            } catch (EventData.InvalidEventDataException ex) {
                LOG.error(ex);
            }

            if (eventProps == null) {
                model.addRow(new Object[]{});
            } else {
                model.addRow(new Object[]{
                    model.getRowCount(),
                    (logMode ? df.format(new Date(up.getTime()))
                     : ((double) (up.getTime() - offset) / 1000.0)),
                    df.format(eventProps.time),
                    eventProps.magnitude,
                    eventProps.latitude,
                    eventProps.longitude,
                    eventProps.depth / 1000.0
                });
            }
        }
    }

    @Override
    public void treeExpanded(TreeExpansionEvent event) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) event.getPath().getLastPathComponent();
        if (node != null) {
            for (int i = 0; i < node.getChildCount(); ++i) {
                DefaultMutableTreeNode child = (DefaultMutableTreeNode) node.getChildAt(i);
                if (loadChildren(child)) {
                    treeModel.nodeStructureChanged(child);
                }
            }
        }
    }

    @Override
    public void treeCollapsed(TreeExpansionEvent event) {
    }
}
