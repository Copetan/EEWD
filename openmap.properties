
# radius of the blind zone surrounding a target in which the lead time of the
# approaching S-wave is negative due to the processing time
eewd.blindZoneRadius = 40

# show all configured stations
eewd.showStations = true

# highlight stations participating in an ongoing event
eewd.showUsedStations = true

# color the station according to the amplitude of the preferred shaking parameter
eewd.showStationShaking = true

# display an alert level icon next to the station
eewd.showStationAlert = true

# velocity of the primary wave in km/s
eewd.vp = 5.5

# velocity of the secondary wave in km/s
eewd.vp = 3.3

# number of seconds after the event progress is stopped
eewd.timeoutAfterOriginTime = 60

# calculate peak ground acceleration
eewd.usePGA = true

eewd.usePGV = true
eewd.useI = true
eewd.useSpectra = true
eewd.useSpectrumT = true
eewd.useOther = true
eewd.otherName = "string"
eewd.periods = 0.01,0.03,0.1,0.3,1,2,4,8
eewd.useFequencies = true
eewd.spectraAreDRS = true
eewd.useTables = true
eewd.useEquations = false
eewd.risEpicentral = true
eewd.risHypocentral = false
eewd.useAmpliProxy = true
eewd.ampliProxyName = "VS30"
eewd.ampliProxyValueAtTarget = 760
eewd.regionalShakinScenario = false
eewd.itensityFromParameter = true
eewd.intensityParameter = PGV
eewd.scenarioParameter = PGA
eewd.radiusOfInfluence = 5
eewd.stationDisplacementThreshold = 0.002
eewd.stationTauCThreshold = 0.6

























# **********************************************************************
# 
#  BBNT Solutions LLC, A part of GTE
#  10 Moulton St.
#  Cambridge, MA 02138
#  (617) 873-2000
# 
#  Copyright (C) 1998, 2000, 2001
#  This software is subject to copyright protection under the laws of 
#  the United States and other countries.
# 
# **********************************************************************
# 
# $Source: /net/bitburg/u4/distapps/rcs/openmap/openmap.properties,v $
# $Revision: 1.11 $
# $Date: 2001/10/25 20:41:13 $
# $Author: dietrick $
# 
# **********************************************************************
#
# WHAT IS THIS FILE?
#
# This is a generic OpenMap properties file, which controls how
# components are loaded into the OpenMap application.  It specifies
# the initial projection the map should have when OpenMap is started,
# the layers that should be available, which ones should be turned on,
# and lets you adjust all the layers' attributes for their startup
# configuration.  Most importantly, this file also lets you add and
# remove different components from the application itself.  You can
# modify it with any text editor you like.
#
# WHAT ARE PROPERTIES?
# 
# Java properties are a set of key=value pairs.  The key is the name
# of the thing you are setting, and the value is what you are setting
# it to.  There are a couple of things to look for that we do with key
# values in this properties file.
#
# First, all the properties that can be set for a component are
# *hopefully* listed in the Javadocs (Java API documentation).  If a
# component is specified as a com.bbn.openmap.PropertyConsumer, it
# will be given a change to configure itself based on the settings
# within the properties file.  Components can be layers or any other
# part of the OpenMap application.
#
# Secondly, the keys are scoped to focus the value to a specific
# instance of a components.  If there are more that one layer of a
# specific type (say, two ShapeLayers, one for roads and one for
# rivers), the names of they keys will have a different prefix for the
# key.  For instance, ShapeLayers have a lineColor attribute you can
# set in this file, and the value used is a hexidecimal value for an
# ARGB color (transparency (A), red (R), green (G), blue (B)):
# 
# For a red, non-transparent color for the line.
# lineColor=FFFF0000
# 
# But there are two layers - to scope the property for different
# layers, a prefix must be added to the property, separated by a '.':
#
# roads.lineColor=FFFF0000
# rivers.lineColor=FF0000FF
#
# In this case, the roads layer has a red line color and the rivers
# layer has a blue line color.  The prefix 'roads' and 'rivers' is
# something picked to your liking and used only within this property
# file, and is referred to in OpenMap documentation as a marker name.
# Marker names are first used in a list - the openmap.layers property
# is a perfect example:
#
# openmap.layers=first second third
#
# In this example, I've chosen first, second and third to be marker
# names of three different layers.  Later in the properties file, I
# would use these marker names to define the layers and each layer's
# attributes.  For the 'first' layer, I'll define a ShapeLayer:
#
# # All layers require a class name that defines which one to use
# first.class=com.bbn.openmap.layer.shape.ShapeLayer
#
# # And a pretty name to use in the GUI
# first.prettyName=Roads
#
# # Now come properties that are particular to ShapeLayers:
#
# # These first two are mandatory for the ShapeLayer:
# first.shapeFile=<path to shape file (.shp)>
# first.spatialIndex=<path to spatial index file (.ssx)>
#
# # These are optional, and override the defaults set in the ShapeLayer:
# first.lineColor=FFFF0000
# first.lineWidth=2
#
# You do this for each layer listed.  To add a layer to the
# application, you make up a marker name, add it to the list, and then
# define a set of properties for it using the marker name as a prefix.
#

# This marker name list paradigm is used throughout the properties
# file.  It's an important concept to understand before modifying this
# file.
#
# HOW MANY PROPERTIES FILES ARE THERE?
#
# OpenMap looks for this file in several different places.  When it
# finds one, it loads all the properties, and moves on.  If two
# properties have the same key, the last version read wins.  The most
# important place to keep a version of the openmap.properties file is
# a personalized one in your home directory or profile directory.
# This is the last one read.  It also lets you personalize your
# application setup and not affect anyone else using the OpenMap
# installation.
#
# OK, lets define the map!
#
# ###################################################
# These properties define the starting projection of the map.  
# These properties are listed in com.bbn.openmap.Environment.java,
# and affect the initialization of the application.
# ###################################################

# Latitude and longitude in decimal degrees
openmap.Latitude=46.5f
openmap.Longitude=9.1f
# Scale: zoom level (1:scale)
openmap.Scale=2500000f

# Projection type to start the map with.  Try "cadrg", "orthographic",
# which are projection IDs.  Check a particular projection class for
# it's ID string.
openmap.Projection=cadrg

# Width and Height of map, in pixels
openmap.Width=1280
openmap.Height=800

# Change this for a different title in the main window.
openmap.Title=European Early Warning Display

# pixel X/Y window position (if values < 0, then center window on screen)
openmap.x=-1
openmap.y=-1

# The background color of the map, in hex AARRGGBB values (AA is
# transparancy, RR, GG and BB are red, green and blue in hex values
# between 00-FF (0-255)).
openmap.BackgroundColor=FFC0C0C0

# Here is a property that lets you add debug statements to the
# application, to get more informative printouts detailing what is
# going on in the application.  Each source file may Debug statements
# throughout it (Debug.debugging("keyword") or
# Debug.message("keyword", "statement")), and you can turn those
# statements on by adding those keywords to this list.  Follows the
# marker name paradigm, with space-separated names.
openmap.Debug=basic menu

# Ironically, the "properties" property, which details where the
# PropertyHandler is looking for its properties, won't work here.

# ###################################################
# These are miscellaneous variables for the OpenMap application.
# ###################################################
# How to lauch a browser to display additional information.
openmap.WebBrowser=/usr/bin/netscape -install
# Used for creating web pages for the browser
openmap.TempDirectory=/tmp
# Help web pages
openmap.HelpURL=http://openmap.bbn.com/doc/user-guide.html
# Use internal frames as an application
gui.UseInternalFrames=false

# OpenMap has a Debug messaging mechanism that lets you set certain
# keywords as environment variables (-Ddebug.keyword) to enable
# printouts from different objects.  The code contains these keywords,
# and by looking at a classes' code, you can figure out what the
# keywords are (look for Debug.message("keyword", "message") and 'if
# (Debug.debugging("keyword")' statements).  You can enable these
# messages by putting those keywords in a space-separated list in this
# property.  If you don't want extra messages, you can ignore this
# property and leave it empty.

#openmap.Debug=

# You may be trying to run OpenMap as an applet, with the data files
# in their own jar file.  It's difficult to get the applet to look in
# a data jar file if there are no classes in it (I couldn't find a
# solution to this).  So, OpenMap now has a workaround.  You can use
# the com.bbn.openmap.io.AppletDataNugget class to create a
# package-less, empty class to put at the root of your data jar file
# (JavaDocs contains instructions, and there is a usage statement
# printout if you run the class).  It might be good practice to name
# this class the same name as the jar file itself.  Put the name of
# the class (or classes) that is in the data jar file in this list,
# and the BinaryFile will be able to find it.  If you aren't running
# as an applet, or your data is not in a jar file by itself, you don't
# need to use this property.

#openmap.appletDataNuggets=

# ###################################################
# These properties define the general components to use in the
# application, OTHER than layers.  Notice the marker name list.  You
# can add and removed parts of the application here, simply by
# adjusting this marker name list and adding properties for that
# marker name.  Note the order in which menu objects are important,
# except helpMenu which is always adjusted to be the last menu item.
#
# If you want to remove components from the application, simply remove
# the marker name from the openmap.components list.  You don't have to
# delete the class definition property, too.  If you want to add a
# component to the list, add the marker name to the openmap.components
# list when you want it to be created and added relative to the other
# components, and then add a 'marker name'.class property for that
# component to this file.
# ###################################################

openmap.components=frame omdrawingtool toolbar omToolSet layersPanel omdtl overviewMapHandler layerHandler  mouseModePanel informationDelegator mouseDelegator navMouseMode selectMouseMode distanceMouseMode nullMouseMode menuBar fileMenu helpMenu controlMenu navigateMenu layersMenu helpUserMenuItem omlineloader projectionstack projectionstacktool omcircleloader omrectloader ompointloader ompolyloader goto addlayer

frame.class=com.bbn.openmap.gui.OpenMapFrame
layerHandler.class=com.bbn.openmap.LayerHandler
toolBar.class=com.bbn.openmap.gui.ToolPanel
omToolSet.class=com.bbn.openmap.gui.OMToolSet
layersPanel.class=com.bbn.openmap.gui.LayersPanel
overviewMapHandler.class=com.bbn.openmap.gui.OverviewMapHandler
layersMenu.class=com.bbn.openmap.gui.LayersMenu
menuPanel.class=com.bbn.openmap.gui.MenuPanel
mouseModePanel.class=com.bbn.openmap.gui.MouseModePanel
informationDelegator.class=com.bbn.openmap.InformationDelegator
mouseDelegator.class=com.bbn.openmap.MouseDelegator
navMouseMode.class=com.bbn.openmap.event.NavMouseMode2
selectMouseMode.class=com.bbn.openmap.event.SelectMouseMode
distanceMouseMode.class=com.bbn.openmap.event.DistanceMouseMode
nullMouseMode.class=com.bbn.openmap.event.NullMouseMode
menuBar.class=com.bbn.openmap.gui.MenuBar
fileMenu.class=com.bbn.openmap.gui.FileMenu
helpMenu.class=com.bbn.openmap.gui.DefaultHelpMenu
controlMenu.class=com.bbn.openmap.gui.ControlMenu
navigateMenu.class=com.bbn.openmap.gui.NavigateMenu
helpUserMenuItem.class=com.bbn.openmap.gui.UserGuideMenuItems
omdrawingtool.class=com.bbn.openmap.tools.drawing.OMDrawingTool
omlineloader.class=com.bbn.openmap.tools.drawing.OMLineLoader
omcircleloader.class=com.bbn.openmap.tools.drawing.OMCircleLoader
omrectloader.class=com.bbn.openmap.tools.drawing.OMRectLoader
ompointloader.class=com.bbn.openmap.tools.drawing.OMPointLoader
ompolyloader.class=com.bbn.openmap.tools.drawing.OMPolyLoader
projectionstack.class=com.bbn.openmap.proj.ProjectionStack
projectionstacktool.class=com.bbn.openmap.gui.ProjectionStackTool
omdtl.class=com.bbn.openmap.tools.drawing.OMDrawingToolLauncher
addlayer.class=com.bbn.openmap.gui.LayerAddPanel


# ###################################################
# Properties defined for the overview map handler.
# ###################################################

# marker name list, layer defined later
overviewLayers=overviewLayer
# how zoomed out to keep the overview map versus the main map
overviewScaleFactor=10f
# when to stop zooming in
overviewMinScale=10000000f
# the layer to use to render on top, showing where the main map covers.
overviewStatusLayer=com.bbn.openmap.layer.OverviewMapAreaLayer

# ###################################################
# You can refer to other properties files and have their properties
# loaded as well.  This is good for defining a set of layers that work
# with a particular type of data, for instance, and then override some
# of those properties defined in those files to localize them for your
# setup.  This works with a marker name list.  By default, nothing defined.
# ###################################################

#openmap.include=include1 include2
#include1.URL=<http://whatever>
#include2.URL=<http://whatever>

# ###################################################
# Here is the list of layers to add to the map.  The properties for
# each marker name are defined later.  
#
# If you want to remove a layer from the application, remove its
# marker name from the openmap.layers property list.  You do not have
# to delete all of its properties as well.
#
# If you want to add a layer to the application, add it's marker name
# to the openmap.layers property list, and then add its properties to
# this file.  As a minimum, Layers all need a 'marker name'.class
# property, and a 'marker name'.prettyName property (for the GUI
# components).  Consult the JavaDocs for a layer to see what other
# properties can be set for that layer.
# ###################################################

# Layers listed here appear on the Map in the order of their names.
openmap.layers=daynight grat osm

# These layers are turned on when the map is first started.  Order
# does not matter here...
openmap.startUpLayers=osm grat

# In OpenMap 4.4, the LayerAddPanel was added.  This panel allows
# certain layers/plugins to be added to the application dynamically.
# Only certain layers/plugin have been updated to be able to work with
# the Inspector to set their inital parameters. To add a layer to this
# list, create a unique marker name for a generic instance of the
# layer, and then supply the <layername>.class field and
# <layername>.prettyName (see below) for that object.  The class name
# will be the type of layer/plugin created by the LayerAddPanel, and
# this prettyName will be the generic description of the layer
# presented to the user.  The user will have an opportunity to name
# the specific layer that gets created.
openmap.addableLayers=grat daynight date

osm.class=com.bbn.openmap.layer.imageTile.MapTileLayer
osm.prettyName=Open Street Map
osm.tileFactory=com.bbn.openmap.dataAccess.mapTile.ServerMapTileFactory
osm.rootDir=http://c.tile.openstreetmap.org/{z}/{x}/{y}.png
osm.localCacheRootDir=/tmp/osmtiles
osm.cacheSize=1000
osm.mapTileTransform=OSMMapTileCoordinateTransform

grat.class=com.bbn.openmap.layer.GraticuleLayer
grat.prettyName=Graticule Layer
grat.threshold=1.2
grat.1DegreeColor=c7a0a0a0
grat.5DegreeColor=c7a0a0a0
grat.10DegreeColor=c7a0a0a0
grat.datelineColor=7F000099
grat.equatorColor=FFFF0000
grat.textColor=c7a0a0a0

### Day/Night shading layer properties
daynight.class=com.bbn.openmap.layer.daynight.DayNightLayer
daynight.prettyName=Day/Night Shading
# draw terminator as poly (faster calculation than image, defaults to
# true).
daynight.doPolyTerminator=true
# number of vertices for polygon terminator line.  this is only valid
# if doPolyTerminator is true...
daynight.terminatorVerts=512
# termFade - the distance of the transition of fade, as a percentage of PI.
daynight.termFade=.1
# currentTime - true to display the shading at the computer's current time.
daynight.currentTime=true
# updateInterval - time in milliseconds between updates.  currentTime has to be
# true for this to be used.  1000*60*5 = 300000 = 5min updates
daynight.updateInterval=300000
# Shading Colors (32bit ARGB)
daynight.nighttimeColor=64000000
daynight.daytimeColor=00FFFFFF

overviewMapHandler.overviewLayers=overviewLayer
overviewMapHandler.overviewScaleFactor=10f
overviewMapHandler.overviewMinScale=10000000f
overviewMapHandler.overviewStatusLayer=com.bbn.openmap.layer.OverviewMapAreaLayer
overviewMapHandler.lineColor=ffff0000
overviewMapHandler.fillColor=66ff0000

overviewLayer.class=com.bbn.openmap.layer.shape.ShapeLayer
overviewLayer.prettyName=Overview
overviewLayer.shapeFile=data/shape/dcwpo-browse.shp
overviewLayer.spatialIndex=data/shape/dcwpo-browse.ssx
overviewLayer.lineColor=ff000000
overviewLayer.fillColor=DAD5CB

openmap.projectionLoaders=mercator orthographic cadrg

openmap.mercator.class=com.bbn.openmap.proj.MercatorLoader
openmap.mercator.prettyName=Mercator

openmap.orthographic.class=com.bbn.openmap.proj.OrthographicLoader
openmap.orthographic.prettyName=Spherical

openmap.cartesian.class=com.bbn.openmap.proj.CartesianLoader
openmap.cartesian.prettyName=Cartesian

openmap.cadrg.class=com.bbn.openmap.proj.CADRGLoader
openmap.cadrg.prettyName=CADRG

